1) Add AngularJS

2) Add ng-app="contactsApp" to <html>

3) Update HTML inputs to include firstname, middlename, lastname

4) Add mainController to body

5) Add a script element in HTML to connect controller.js

6) Add a module to controller.js


		var contactsApp = angular.module('contactsApp', []);


7) Add a controller to controller.js and test whether it works.


		contactsApp.controller('mainController', function ($scope, $http) {

			console.log('Sup');

		});

8) Create test contacts in controller.js to place into the HTML table


		var negan = {
			firstName: 'Negan',
			middleName: '',
			lastName: '',
			number: '111-1111'
			email: 'negan@yoursavior.com'
		}

		var batman = {
			firstName: 'Bruce',
			middleName: '',
			lastName: 'Wayne',
			number: '222-2222',
			email: 'bwayne@wayneenterprise.com'
		}


		var contacts = [negan, batman];


9) Make the contacts variable available in HTML


		$scope.contacts = contacts;


10) In <tbody>, add a <tr> with the attribute ng-repeat="contact in contacts"


		<tr ng-repeat="contact in contacts"></tr>


11) Add 3 <td> elements and use data binding for the contact name, number, and email 


		<tr ng-repeat="contact in contacts">
			<td>{{contact.firstName}} {{contact.middleName}} {{contact.lastName}}</td>
			<td>{{contact.number}}</td>
			<td>{{contact.email}}</td>
		</tr>


12) At the beginning of controller.js, create the route from which you'll GET the contacts data


		$http.get('/contacts');


13) Add a response in server.js (after app.use) for GET requests sent to /contacts


		app.get('/contacts', function (request, response) {
			console.log('GET request received on server.');
		});


14) Move the test data from the controller into the server and retrieve it from the server

		14a) Cut the objects and the contacts variable
		14b) Delete the $scope.contacts=contacts; line
		14c) Paste the objects and the contacts variable in the get request of server.js


				app.get('/contacts', function (request, response) {
					console.log('GET request received on server.');
				
					var negan = {
						firstName: 'Negan',
						middleName: '',
						lastName: '',
						number: '111-1111',
						email: 'negan@yoursavior.com'
					}
				
					var batman = {
						firstName: 'Bruce',
						middleName: '',
						lastName: 'Wayne',
						number: '222-2222',
						email: 'bwayne@wayneenterprise.com'
					}
				
					var contacts = [negan, batman];
				});


		14d) Under the contacts variable add a line to respond with contacts


				response.json(contacts);



15) In controller.js's get request, grab the response from the server and put it in the table.  
	To do this, we'll just add a function and assign the value of the response to the variable 
	contacts.


		// Retrieve contact data from server. '/contacts' is the route that we'll get the data from.
		$http.get('/contacts').then(function (response) {
			// $scope allows us to use this contacts variable in the html file and loads the data into browser.
			$scope.contacts = response.data;
			console.log('Client-side received the data requested from the server');
		});



16) Add test data to MongoDB

		16a) Start Mongo

		16b) Create a db called contactsdb

				use contactsdb

		16c) Insert test data

				negan = {"firstName": "Negan", "middleName": "", "lastName": "", "number": "111-1111", "email": "negan@thesavior.com"}

				tyrion = {"firstName": "Tyrion", "middleName": "", "lastName": "Lanister", "number": "222-2222", "email": "drinkingandknowing@got.com"}

				db.contactsdb.insert(negan);
				db.contactsdb.insert(tyrion);


17) Connect server to the db

		17a) Install mongojs


				npm install --save mongojs


		17b) In server.js, require mongojs under the app variable


				var express = require('express');
				var app = express();
				var mongojs = require('mongojs');


		17c) Create a variable called db and assign it the value of the db and collection to use


				var db = mongojs('contactsdbforrepo', ['contactsdbforrepo']);


		17d) Delete the test objects, the contacts variable, and the response.json() from the server.

		17e) In the GET request in server.js, access the db and just log the db documents to the console.




















NEXT DAY

ADD POST REQUEST


18) Add ng-model attribute to each html <input> field


		<form>
			<input ng-model="contact.firstName" id="first-name-input" placeholder="first name" required>
			<input ng-model="contact.middleName" id="middle-name-input" placeholder="middle name">
			<input ng-model="contact.lastName" id="last-name-input" placeholder="last name">
			<input ng-model="contact.number" id="number-input" placeholder="number">
			<input ng-model="contact.email" id="email-input" placeholder="email">
			<button type="submit">Add Contact</button>
		</form>
		

19) Remove the <button>'s type attribute and add ng-click attribute with function postContact()


		<button ng-click="postContact()">Add Contact</button>


20) Create a controller to post contacts


		20a) In controller.js, under the $http.get, create a postContact controller that logs the data in the <input> fields


				$scope.postContact = function() {
					console.log($scope.contact);
				}


		20b) In controller.js, send the data from the input fields to the server


				$scope.postContact = function() {
					console.log($scope.contact);
					$http.post('/contacts', $scope.contact);
				}


21) In server.js, under the get request, create a post that listens for the post from the controller


		app.post('/contacts', function (request, response) {
			console.log(request.body);
		});


		21a) The post listner is trying to parse the body of the requst. In order to do that, we need a node module capable of handling the parsing of the body.


				npm install --save body-parser


		21b) Require the body-parser module in server.js


				var express = require('express');
				var app = express();
				var mongojs = require('mongojs');
				var db = mongojs('contactsdbforrepo', ['contactsdbforrepo']);
				var bodyParser = require('body-parser');
				var port = 3000;


		21c) In server.js, under the existing app.use, add another app.use for the body-parser


				app.use(express.static(__dirname + '/app/'));
				app.use(bodyParser.json());


22) Have the server create the data in the mongo db by adding to the app.post()

		app.post('/contacts', function (request, response) {
			console.log(request.body);
		
			// insert() sends data into the db and the response gets sent back to controller
			db.contactsdbforrepo.insert(request.body, function (error, document) {
				response.json(document); 
			});
		});


23) Test that the controller received the request from the server by adding to the addContact()


		$scope.postContact = function() {
			console.log($scope.contact);
			$http.post('/contacts', $scope.contact).then(function (response) {
				console.log(response.data);
			});
		}


24) Display the newly created contact in the table when <button> is clicked. We could add another http.get to our postContact() function, but then we'd be writing the same code twice. Instead, we'll move our existing http.get into a function called getContact()


		var getContacts = function () {
			// Retrieve contact data from server. '/contacts' is the route that we'll get the data from.
			$http.get('/contacts').then(function (response) {
				// $scope allows us to use this contacts variable in the html file and loads the data into 	browser.
				$scope.contacts = response.data;
			});
		}

25) We now need to call that function as soon as the page loads in order for the table data to be displayed as before. We'll create the invocation directly under the function.


26) Now we'll call the getContacts() function from inside postContact() function.

		$scope.postContact = function() {
			console.log($scope.contact);
			$http.post('/contacts', $scope.contact).then(function (response) {
				console.log(response.data);
	
				getContacts();
			});
		}

27) Last step for the post is to clear the input fields. We'll create the below function.

		function clearInputs() {
			$scope.contact.firstName = '';
			$scope.contact.middleName = '';
			$scope.contact.lastName = '';
			$scope.contact.number = '';
			$scope.contact.email = '';
		}


28) Invoke the function after the getContacts() all inside postContact()


		$scope.postContact = function() {
			console.log($scope.contact);
			$http.post('/contacts', $scope.contact).then(function (response) {
				console.log(response.data);
	
				getContacts();
				clearInputs();
			});
		}


DELETE CALL




27) 